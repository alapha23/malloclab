mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
mm_init is called
Extend heap
add_node:List is empty
Add node, new ptr at0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
In coalesce function
mm_init is finished


mm_malloc is called
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147018
freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147018
After advance to next brk, brk=0xf6147818
Delete_node:freeptr at pointer0xf6147018, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6147818
add_node:List is empty
Add node, new ptr at0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6147818
freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf6147818
After advance to next brk, brk=0xf61487d0
Delete_node:freeptr at pointer0xf6147818, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6147818, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61487d0
add_node:List is empty
Add node, new ptr at0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61487d0
freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61487d0
After advance to next brk, brk=0xf6148808
Delete_node:freeptr at pointer0xf61487d0, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61487d0, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf6148808
add_node:List is empty
Add node, new ptr at0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf6148808
freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6149020
At the old node the next addr is 0xf6149020
At the old node the next addr is 0xf6149020
Inside add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
After add_nodefreeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
In coalesce function
 delete current node0xf6149020 from free list
Delete_node:freeptr at pointer0xf6149020, prev_addr=f6148808, next_ptr=ffffffff
	Start: 	 at pointer 0xf6149020, prev_addr = f6148808, next_ptr=ffffffff
	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=f6149020
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf6148808
After advance to next brk, brk=0xf61497f8
Delete_node:freeptr at pointer0xf6148808, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf6148808, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf61497f8
add_node:List is empty
Add node, new ptr at0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff


mm_malloc is called
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf61497f8
freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Found a block successfully
No need for extending the heap. Place a new block
Before advance to next brk, brk=0xf61497f8
After advance to next brk, brk=0xf614a7e8
Delete_node:freeptr at pointer0xf61497f8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf61497f8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614a7e8
add_node:List is empty
Add node, new ptr at0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Place is finished, mm_malloc is finished


mm_malloc is called
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Checking if extend is needed in mm_malloc
Starting to find fit from freeptr0xf614a7e8
freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
failed to find a block
Failed to find a fit free block
Extending heap is needed
Extend heap
add_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf614b028
At the old node the next addr is 0xf614b028
At the old node the next addr is 0xf614b028
Inside add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
After add_nodefreeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
In coalesce function
 delete current node0xf614b028 from free list
Delete_node:freeptr at pointer0xf614b028, prev_addr=f614a7e8, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b028, prev_addr = f614a7e8, next_ptr=ffffffff
	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=f614b028
ffffffff
Delete freeptr
Before advance to next brk, brk=0xf614a7e8
After advance to next brk, brk=0xf614b7d8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614a7e8, prev_addr = ffffffff, next_ptr=ffffffff
Free list is empty after deleting
After delete node:List is empty
Add free node from spliting, at 0xf614b7d8
add_node:List is empty
Add node, new ptr at0xf614b7d8
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
Heap extended, mm_malloc is finished
freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff


mm_free is called to freee0xf6147018
add_node:freeptr at pointer0xf614b7d8, prev_addr=ffffffff, next_ptr=ffffffff
	Start: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=ffffffff
In add node function we are supposed to free0xf6147018
At the old node the next addr is 0xf6147018
At the old node the next addr is 0xf6147018
Inside add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function


mm_free is called to freee0xf6147818
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6147818
At the old node the next addr is 0xf6147818
At the old node the next addr is 0xf6147818
Inside add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6147818 from free list
Delete_node:freeptr at pointer0xf6147818, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147818, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6147818
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61487d0
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61487d0
At the old node the next addr is 0xf61487d0
At the old node the next addr is 0xf61487d0
Inside add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61487d0 from free list
Delete_node:freeptr at pointer0xf61487d0, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61487d0, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61487d0
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf6148808
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf6148808
At the old node the next addr is 0xf6148808
At the old node the next addr is 0xf6148808
Inside add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf6148808 from free list
Delete_node:freeptr at pointer0xf6148808, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf6148808, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f6148808
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf61497f8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf61497f8
At the old node the next addr is 0xf61497f8
At the old node the next addr is 0xf61497f8
Inside add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
 delete current node0xf61497f8 from free list
Delete_node:freeptr at pointer0xf61497f8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf61497f8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f61497f8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
ffffffff
Delete freeptr


mm_free is called to freee0xf614a7e8
add_node:freeptr at pointer0xf6147018, prev_addr=f614b7d8, next_ptr=ffffffff
	Start: 	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=ffffffff
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In add node function we are supposed to free0xf614a7e8
At the old node the next addr is 0xf614a7e8
At the old node the next addr is 0xf614a7e8
Inside add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After add_nodefreeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
In coalesce function
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = f614b7d8, next_ptr=f614a7e8
	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
	End: 	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
f6147018
Delete node:	 at pointer 0xf614b7d8, prev_addr = ffffffff, next_ptr=f6147018
After deletion, the list:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
Delete_node:freeptr at pointer0xf614a7e8, prev_addr=f6147018, next_ptr=ffffffff
	Start: 	 at pointer 0xf614a7e8, prev_addr = f6147018, next_ptr=ffffffff
	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
	End: 	 at pointer 0xf6147018, prev_addr = ffffffff, next_ptr=f614a7e8
ffffffff
Delete freeptr
Perf index = 45 (util) + 0 (thru) = 45/100

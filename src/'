/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 *
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

#define WSIZE   4   /* word size (bytes) */
#define DSIZE   8   /* doubleword size (bytes) */
#define CHUNKSIZE  (1<<12)  /* initial heap size (bytes) */
#define OVERHEAD  8   /* overhead of header and footer (bytes) */

#define IMPLICIT_LIST 1
#define EXPLICIT_LIST 0

#define MAX(x, y) ((x) > (y)? (x) : (y))

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)  ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)     (*(size_t *)(p))
#define PUT(p, val)  (*(size_t *)(p) = (val))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)     ((char *)(bp) - WSIZE)
#define FTRP(bp)     ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* single word (4) or double word (8) alignment */
/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (DSIZE-1)) & ~0x7)

#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

static unsigned int extend_cnt = 0;
static char* freeptr;
static char* allocptr;

/*
 * coalesce: merge free blocks
 *
 */

static void *coalesce(void *brk)
{
  /* Is the previous block allocated?  */
  size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(brk))); 
  /* Is the next block allocated?  */
  size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(brk)));
  /* the size of the current block */
  size_t size = GET_SIZE(HDRP(brk));

  if(prev_alloc && next_alloc)
    return brk;
  else if(prev_alloc && !next_alloc)
  {
  /* size is total size of current and next block*/
    size += GET_SIZE(HDRP(NEXT_BLKP(brk)));
  /* create header and footer */
    PUT(HDRP(brk), PACK(size, 0));
    PUT(FTRP(brk), PACK(size, 0));
    return brk;
  }
  else if( !prev_alloc && next_alloc )
  {
    /* current + prev */
    size += GET_SIZE(HDRP(PREV_BLKP(brk)));
    PUT(FTRP(brk), PACK(size, 0));
    PUT(HDRP(PREV_BLKP(brk)), PACK(size, 0));
    /* return previous block ptr as the current one is merged*/
    return (PREV_BLKP(brk));
  }
  else
  {
    /* both prev and next blocks are free */
    size += GET_SIZE(HDRP(PREV_BLKP(brk))) + GET_SIZE(FTRP(NEXT_BLKP(brk)));
    PUT(FTRP(NEXT_BLKP(brk), PACK(size, 0));
    PUT(HDRP(PREV_BLKP(brk)), PACK(size, 0));
    return (PREV_BLKP(brk));
  }
}


/*
 * extend_heap: extend the heap by calling mem_sbrk
 */

static void *extend_heap(size_t words)
{
  char *oldbrk;
  size_t newsize = (works % 2) ? (words+1) * WSIZE : words * WSIZE;
  if((int)(oldbrk = mem_sbrk(newsize)) < 0)
    return NULL;

  /* Initialize free block header and footer and epilogue header*/
  PUT(HDRP(oldbrk), PACK(newsize, 0));	/* the new free block header */
  PUT(FTRP(oldbrk), PACK(newsize, 0));  /* free block footer */
  PUT(HDRP(NEXT_BLKP(oldbrk)), PACK(0, 1));


  /* coalesce if the previous block was free */
  return coalesce(oldbrk);
}

static void *find_fit(size_t newsize)
{
  #if IMPLICIT_LIST == 1
	void *brk;

	for(brk = mem_heap_lo(); GET_SIZE(HDRP(brk) > 0; brk = NEXT_BLKP(brk)))
	{
	  if(!GET_ALLOC(HDRP(brk)) && (newsize <= GET_SIZE(HDRP(brk))))
	    return brk;
	}
  #else
	return NULL;
  #endif
}

static void place(void *brk, size_t asize)
{
  size_t csize = GET_SIZE(HDRP(brk));

  PUT(HDRP(brk), PACK(csize, 1));
  PUT(FTRP(brk), PACK(csize, 1));
}

/*
 * mm_init - initialize the malloc package.
 * 	Allocating initial heap area, 64M at beginning 	
 * 	return -1 if there is a problem, 0 otherwise
 */
int mm_init(void)
{
  mem_init();

  allocptr = mem_heap_lo();  

  PUT(allocptr, 0);
  // create prologue
  PUT(allocptr+WSIZE, PACK(OVERHEAD, 1));
  PUT(allocptr+DSIZE, PACK(OVERHEAD, 1));
  allocptr += DSIZE;
  freeptr = allocptr; // free is not implemented
// need implement a macro IS_FREE

  // create epilogue header
  PUT(allocptr+WSIZE, PACK(0, 1));
  
  if(extend_heap(CHUNKSIZE/WISE) == NULL )
    return -1;
  return 0;
}
/*
 * mm_exit - treat memory leak
 * 	free all unfreed memory blocks
 */
int mm_exit(void)
{
  mem_reset_brk();
  mem_deinit();
  return 1;
}

/*
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 *     * maintain alignment
 *     * find the suitable place
 *     * place the block
 *     * extend the heap if not enough space
 */
void *mm_malloc(size_t size)
{
  assert(size>0);
  // maintain alignment
  // new size according to double word alignment
  // we add a DSIZE as header and footer is needed
  size_t newsize = ALIGN(size + DSIZE);
  size_t extendsize;

  if( allocptr = find_fit(newsize) !=NUL)
  {
    place(allocptr, newsize);
    return allocptr;
  }

  extendsize = MAX(newsize, CHUNKSIZE);
  if((allocptr = extend_heap(extendsize/WSIZE) == NULL))
    return NULL;
  place(allocptr, newsize);
  return allocptr;

// find next suitable place
//  while(GET_ALLOC(freeptr))
//  allocptr =(char *);  
//  mem_sbrk is used to extend the heap
//  we should not extend the heap normally
//  mem_sbrk(newsize);
// check heap rest space
/*  while (allocptr == (void *)-1)
  { 
  //every time we extend the heap, we extend size two times as previous extend size
    mem_sbrk(CHUNKSIZE>>(extend_cnt++));    
    allocptr = mem_sbrk(newsize);
  }

    allocptr += GET_SIZE(HDPT(allocptr))
    *(size_t *)allocptr =;
    return (void *)((char *)p + SIZE_T_SIZE);*/
 }


/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{
  size_t size = GET_SIZE(HDRP(brk));

  PUT(HDRP(brk), PACK(size, 0));
  PUT(FTRP(brk), PACK(size, 0));
  coalesce(brk);
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
  void *oldptr = ptr;
  void *newptr;
  size_t copySize;

  newptr = mm_malloc(size);
  if (newptr == NULL)
    return NULL;
  copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
  if (size < copySize)
    copySize = size;
  memcpy(newptr, oldptr, copySize);
  mm_free(oldptr);
  return newptr;
}

/*
 * mm_check - Does not currently check anything
 * 	is every block marked as free?
 * 	is contiguous free blocks escaped coalescing?
 * 	is every free block in the free list?
 * 	do allocted blocks overlap?
 * 	do pointers in the heap block point to valid heap address?
 *	return nonzero if heap is consistent
 */
static int mm_check(void)
{
  return 1;
}



